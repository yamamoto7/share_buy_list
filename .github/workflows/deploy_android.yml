name: Deploy App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest

    steps:
      - name: set up repository
        uses: actions/checkout@v2
      - name: unlock secrets
        uses: sliteteam/github-action-git-crypt-unlock@1.2.0
        env:
          GIT_CRYPT_KEY: ${{ secrets.CRYPT_PUB_KEY }}
      - name: set up java
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'
      - name: install flutter
        uses: subosito/flutter-action@v2.3.0
        with:
          flutter-version: '2.10.2'
          channel: 'stable'
      - name: flutter pub get
        run: flutter pub get
      - name: flutter analyze
        run: flutter analyze

  build_ios:
    # iOS の ipa を生成したいので macOS で実行する
    runs-on: macos-latest
    steps:
      - name: set up repository
        uses: actions/checkout@v2

      - name: unlock secrets
        uses: korti11/git-crypt-unlock@v1.0
        with:
          GIT_CRYPT_KEY: ${{ secrets.CRYPT_PUB_KEY }}

      # ProvisioningProfile をシークレットから取り出して、プロジェクトに無理やりセットする
      - name: Import Provisioning Profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo '${{ secrets.PROVISIONING_PROFILE }}' | openssl base64 -d -out ~/Library/MobileDevice/Provisioning\ Profiles/decoded.mobileprovision

      # 証明書を設定
      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
          p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}

      # Flutter コマンド！
      - name: Flutter action
        uses: subosito/flutter-action@v1.3.0
      - run: flutter pub get
      - run: flutter test
      - run: flutter build ios
      - run: flutter build apk    # この時点で Android モジュールは作成完了

      # Xcode で Archive
      - name: iOS Build Action
        uses: yukiarrr/ios-build-action@v0.5.0
        with:
          project-path: ios/Runner.xcodeproj
          p12-base64: ${{ secrets.CERTIFICATES_P12 }}
          mobileprovision-base64: ${{ secrets.PROVISIONING_PROFILE }}
          code-signing-identity: iOS Distribution
          team-id: ${{ secrets.APPLE_TEAM_ID }}
          workspace-path: ios/Runner.xcworkspace
          export-method: development
          certificate-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
          output-path: app-release.ipa

      # デプロイは Ubuntu で行うため、一度モジュールをアップロードする
      - name: Upload artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: ios
          path: app-release.ipa

      - name: Upload artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: android
          path: build/app/outputs/apk/release/app-release.apk

  deploy_ios:
    needs: [build_ios]
    # 2020/04 時点
    # Firebase-Distribution-Github-Action が macOS 未対応のため Ubuntu で実行する
    runs-on: ubuntu-latest

    steps:

      - name: set up repository
        uses: actions/checkout@v2
      - name: unlock secrets
        uses: sliteteam/github-action-git-crypt-unlock@1.2.0
        env:
          GIT_CRYPT_KEY: ${{ secrets.CRYPT_PUB_KEY }}

      - name: Download artifact
        uses: actions/download-artifact@v1.0.0
        with:
          name: ios

      - name: Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1.2.1
        with:
          appId: ${{secrets.FIREBASE_APP_ID_IOS}}
          token: ${{secrets.FIREBASE_TOKEN}}
          file: ios/app-release.ipa
          groups: primary_testers

  build_android:
    name: build android
    needs: [deploy_ios]
    runs-on: ubuntu-latest

    steps:
      - name: set up repository
        uses: actions/checkout@v2
      - name: unlock secrets
        uses: sliteteam/github-action-git-crypt-unlock@1.2.0
        env:
          GIT_CRYPT_KEY: ${{ secrets.CRYPT_PUB_KEY }}
      - uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: setup cache
        uses: actions/cache@v1
        with:
          path: /Users/runner/hostedtoolcache/flutter
          key: ${{ runner.OS }}-flutter-install-cache

      - name: install flutter
        uses: subosito/flutter-action@v2.3.0
        with:
          flutter-version: '2.10.2'
          channel: 'stable'

      - name: flutter dependencies install
        run: flutter pub get

      - name: build apk
        run: |
          flutter build apk
      - name: Upload artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: android
          path: build/app/outputs/flutter-apk/app-release.apk

  deploy_android:
    name: deploy android
    needs: [build_android]
    runs-on: ubuntu-latest
    steps:

      - name: set up repository
        uses: actions/checkout@v2
      - name: unlock secrets
        uses: sliteteam/github-action-git-crypt-unlock@1.2.0
        env:
          GIT_CRYPT_KEY: ${{ secrets.CRYPT_PUB_KEY }}

      - name: Download artifact
        uses: actions/download-artifact@v1.0.0
        with:
          name: android

      # Deploy to Firebase
      - name: Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1.3.4
        with:
          appId: ${{ secrets.FIREBASE_APP_ID_ANDROID }}
          token: ${{ secrets.FIREBASE_TOKEN }}
          file: android/app-release.apk
          groups: primary_testers

